存储: 存储用户或者程序数据

1.web浏览器端存储:
    1.Cookie
    2.浏览器的缓存

    (H5新增)
    3.离线缓存
    4.localStorage
    5.sessionStorage

    浏览器数据库 (现在已经放弃了)
    6.indexDB (还可以用 ,但是操作繁琐)
    7.websql

2.服务器端存储:
    session

--------------------------------------------------------------------------

浏览器的缓存: 可以减少http请求 ,降低服务器压力 = > 浏览器自带功能
    浏览器默认会对一些静态资源文件进行缓存, 如果下一次请求一个相同地址(url)的资源时,会优先从缓存中读取,
    如果缓存没有则重新从服务器下载

    不足:因为浏览器会对一些历史的静态资源文件进行缓存 (css,js,图片之类的) ,html文件 不缓存 ,如果网站内容(css, js)有更新,
    用户再次访问该站点时,检测到一样的url地址,则直接从缓存中使用曾经缓存的文件,而不是下载最新的

    解决方案: 因为浏览器只是根据url地址 来检测是否有缓存 , 所以一般的项目中都会在发布新版本的时候改动一下文件url地址
        常见做法:
            1. 直接在引入的静态资源文件后添加一些参数 v?=1.2  t=201910260959  ....
            2. 直接把静态资源文件放在对应的版本号的文件目录下

    缓存的时间: 是可以通过后台的响应包头配置的 可以根据修改时间 或者一定时间的缓存时间

--------------------------------------------------------------------------
cookie :(存储一些安全级别不需要特别的高数据)
    cookie诞生: 因为http协议是一个无状态协议(在互联上访问无法追踪用户身份标识) , cookie就是用于当作一个http请求的用户标识

    特征:
        1.存储在浏览器客户端 (需要一定的服务器环境下才能使用) = > 可以使用js脚本获取
        2.cookie 不能跨站点(跨域)使用 : 例如baidu.com 站点下的cookie 不能被qq.com 访问的
        3.存储cookie的时候都是按站点存储,一般来说一个站点下可能最多就是20条(170左右)记录 ,一个浏览器最多存储 400条左右(具体情况得视浏览器而定) ,单条不超过4kb(现在1704字节)
        4.cookie会随着http请求 ,一起通过包头发送给对应服务器的后台(当然理论上也是安全的,访问百度时只会发送百度站点下的cookie)
        5.cookie可以设置存活时间(周期) ,时间到会自动失效 ,如果没有设置存活时间会在浏览关闭后自动失效
        6.因为存储在浏览器端,不太安全,容易被一些恶意程序盗取


 session : (存储一些安全要求级别比较高的数据)
       1.存储在服务端的  = > 不能使用js获取
       2.存储的数据比较安全,不会被盗取
       3.浏览器打开页面则创建会话,当前浏览器关闭自动销毁
 -------------------------------------------------------------------------
 (H5新增)localStorage 本地存储 (永久存储) 除非手动删除
     特征:
        1.永久存储 ,除非删除删除不然一直存储在硬盘上
        2.可以存储大量的数据 (css , js ,base64图片)
        3.不允许跨域访问
        4.接口的使用非常方便
        5.只要是同一个站点下 ,多个标签页之间存储的数据是共享的

    使用场景:
            1.经常把一些常用,不怎么更新的css, js 存储
            2.手机app 应用 存储大量的用户数据
            3.微信小程序 用于存储应用的数据

    无论什么存储方式 : 都只能存储字符串

    sessionStorage: 会话存储 ,浏览器关闭即销毁 (可以用来存储一些数据安全级别较高的数据)

------------------------------------------------------------------------
md5 算法加密:  对称型 ,不可解密 : 按照相同的加密算法和被加密的明文, 使用md5加密后 , 密文一样的

------------------------------------------------------------------------
离线缓存: 在离线(无网络)状态下 , 可以继续使用应用中在有网络的时候所缓存的本地文件

    1.需要先服务器配置中 ,添加配置: 以apache 服务器为例
    E:\xampp\apache\conf\mime.types (服务器支持的文件类型)   = > 添加一个文件类型 (默认添加) text/cache-manifest

    2.在网站根目录节点下 ,创建一个扩展名为:  .appcache 文件 - > 用于编写需要缓存文件的清单(告诉浏览在有网络的时候需要去缓存哪些文件)
        manifest 文件可分为三个部分：
        CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进`行缓存 (需要缓存)

        NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存(不能缓存)

        FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面） 如果缓存找不到就跳指定页面

    3.设置html 关联对应的缓存清单

    [ chrome 浏览器需要在https 协议才可以使用离线缓存 ]

    请留心缓存的内容。

    一旦文件被缓存，则浏览器会继续展示已缓存的版本，即使您修改了服务器上的文件。为了确保浏览器更新缓存，您需要更新 manifest 文件。

    注释：浏览器对缓存数据的容量限制可能不太一样（某些浏览器设置的限制是每个站点 5MB）。


---------------------------------------------------------------------------------------------
    说到存储 , 除以上的存储以外 : 更多是在服务端 , 有各种数据库 : mysql , oracle , redis , mongoDB ...


